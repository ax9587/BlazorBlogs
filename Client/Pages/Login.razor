@page "/login"
@using BlazorBlog.Shared.Dtos;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NaviManager


<EditForm Model="user" OnSubmit="HandleLogin">
    <h4>Use a local account to log in.</h4>
    <hr>
    <CustomValidation @ref="customValidation" />
    <ValidationSummary />
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(()=>user.Email)" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" type="password" class="form-control" />
        <ValidationMessage For="@(()=>user.Password)" />
    </div>
    <div class="form-group">
        <div class="checkbox">
            <label for="Input_RememberMe">
                <input type="checkbox" data-val="true" data-val-required="The Remember me? field is required." id="Input_RememberMe" name="Input.RememberMe" value="true">
                Remember me?
            </label>
        </div>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
    <div class="form-group">
        <p>
            <a id="forgot-password" href="/Identity/Account/ForgotPassword">Forgot your password?</a>
        </p>
        <p>
            <a href="/Identity/Account/Register">Register as a new user</a>
        </p>
        <p>
            <a id="resend-confirmation" href="/Identity/Account/ResendEmailConfirmation">Resend email confirmation</a>
        </p>
    </div>
</EditForm>

@code {
    UserLoginRequest user = new UserLoginRequest();
    private CustomValidation customValidation;

    async Task HandleLogin()
    {
        customValidation.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        var result = await Http.PostAsJsonAsync("api/auth/login", user);
        if(result.StatusCode== System.Net.HttpStatusCode.OK)
        {
            var token = await result.Content.ReadAsStringAsync();
            Console.WriteLine(token);
            await LocalStorage.SetItemAsync("token", token);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NaviManager.NavigateTo($"/");
        }
        else
        {
            errors.Add("LoginError",
                new List<string>() { "Invalid Login Attempt." });
            if (errors.Any())
            {
                customValidation.DisplayErrors(errors);
            }
        }

    }
}
